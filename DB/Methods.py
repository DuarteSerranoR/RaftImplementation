import psycopg2

global arg


def launch_db(_arg):
    global arg
    arg = _arg
    (conn, cursor) = connect()
    try:
        cursor.execute("SELECT * FROM Logs;")
    except:
        # Preparing query to create a database
        sql = '''CREATE database "{}-raft-logs"'''.format(arg)
        try:
            # Creating a database
            cursor.execute(sql)
            print("Database created successfully")
        except:
            print("Database already existed")
        try:
            upgrade()
            print("Logs table created successfully")
        except:
            print("Logs table already existed")
    else:
        try:
            upgrade()
            print("Logs table created successfully")
        except:
            print("Logs table already existed")

    disconnect(conn)


def last_log_index():
    (conn, cursor) = connect()
    cursor.execute("select max(id) from Logs;")
    index: int = cursor.fetchone()[0]
    if index is None:
        index = 0
    disconnect(conn)
    return index


def append_log(replica_id: int, label: str, data: str):
    (conn, cursor) = connect()
    if data.__contains__("\'"):
        data = data.replace("'", "\"")
    cursor.execute("insert into Logs (replica_id, label, data)"
                   "values ({}, '{}', '{}');".format(str(replica_id), label, data))
    disconnect(conn)


def get_logs(index):
    (conn, cursor) = connect()
    cursor.execute("select * from Logs where id>{};".format(str(index)))
    result = cursor.fetchall()
    disconnect(conn)
    return result


def upgrade():
    (conn, cursor) = connect()
    cursor.execute('''CREATE TABLE Logs (
        id serial NOT NULL,
        "timestamp" varchar NULL DEFAULT now(),
        replica_id int4 NOT NULL,
        "label" varchar NOT NULL,
        "data" varchar NOT NULL,
        CONSTRAINT logs_pk PRIMARY KEY (id)
    );''')
    disconnect(conn)


def connect():
    global arg
    conn = psycopg2.connect(
        database="{}-raft-logs".format(arg), user='dev', password='passwd', host='127.0.0.1', port='5432'
    )
    conn.autocommit = True
    return conn, conn.cursor()


def disconnect(conn):
    # Closing the connection
    conn.close()

# def downgrade():
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.drop_table('Logs')
#     # ### end Alembic commands ###
